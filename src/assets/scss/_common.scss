/*===========================
  COMMON CSS
===========================*/
@use 'sass:math';
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@200;300;400;500;600;700;800;900&display=swap");

:root {
    --font: "Inter", sans-serif;
    --body-color: #ff6600;
    --heading-color: #212b36;
    --primary-color: #ff6600;
    --white: #ffffff;
    --gold: #ffd700;
    --silver: #c0c0c0;
    --platinum: #e5e4e2;
}

body {
    font-family: var(--font);
    font-weight: normal;
    font-style: normal;
    color: var(--body-color);
    overflow-x: hidden;
    background-color: black;
}

* {
    margin: 0;
    padding: 0;
    @include box-sizing(border-box);
}

img {
    max-width: 100%;
}

a,
button,
input,
textarea {
    @include transition(0.3s);
}

a,
a:focus,
input:focus,
textarea:focus,
button:focus,
.navbar-toggler:focus {
    text-decoration: none;
    outline: none;
    box-shadow: none;
}

a:focus,
a:hover {
    text-decoration: none;
}

i,
span,
a {
    display: inline-block;
}

audio,
canvas,
iframe,
img,
svg,
video {
    vertical-align: middle;
}

h1,
h2,
h3,
h4,
h5,
h6 {
    font-weight: 700;
    color: var(--white);
    margin: 0;
}

h1 {
    font-size: 48px;
}

h2 {
    font-size: 36px;
}

h3 {
    font-size: 28px;
}

h4 {
    font-size: 22px;
}

h5 {
    font-size: 18px;
}

h6 {
    font-size: 16px;
}

ul,
ol {
    margin: 0;
    padding: 0;
    list-style-type: none;
}

p {
    font-size: 16px;
    font-weight: 400;
    line-height: 26px;
    color: var(--body-color);
    margin: 0;
}

.bg_cover {
    background-position: center center;
    background-size: cover;
    background-repeat: no-repeat;
    width: 100%;
    height: 100%;
}

/*===== All Button Style =====*/

.ud-main-btn {
    display: inline-block;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;

    font-weight: 500;
    font-size: 16px;
    border-radius: 5px;
    padding: 15px 25px;
    border: 1px solid transparent;
    color: var(--white);
    cursor: pointer;
    z-index: 5;
    @include transition(0.4s);
    background: var(--primary-color);

    &:hover {
        color: var(--white);
        background: var(--heading-color);
    }
}

.container {
    @media #{$xs} {
        padding-left: 40px;
        padding-right: 40px;
    }
    @media #{$sm} {
        padding-left: 20px;
        padding-right: 20px;
    }
}

.back-to-top {
    width: 40px;
    height: 40px;
    line-height: 34px;
    background: var(--primary-color);
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
    text-align: center;
    justify-content: center;
    align-items: center;
    border-radius: 5px;
    position: fixed;
    right: 30px;
    bottom: 30px;
    z-index: 99;
    color: var(--white);
    @include transition(0.3s);

    &:hover {
        color: var(--white);
        background: var(--heading-color);
    }

    &.hidden {
        visibility: hidden;
    }
}

/*===========================
  Text Effects CSS
===========================*/

/*===== Text Glitch Effect =====*/

/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.glitch {
    position: relative;
    letter-spacing: .08em;
    animation: glitch-skew 2s infinite linear alternate-reverse;

    // Creates a copy before our text.
    &::before {
        // Duplicates our text with the mixin.
        @include glitchCopy;
        // Scoots text slightly to the left for the color offset.
        left: 2px;
        // Creates the color 'shadow' that happens on the glitch.
        text-shadow: -2px 0 var(--primary-color);
        /* Creates an initial clip for our glitch. This works in
        a typical top,right,bottom,left fashion and creates a mask
        to only show a certain part of the glitch at a time. */
        clip: rect(44px, 450px, 56px, 0);
        /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
        with an alternating animation to keep things fresh. */
        animation: glitch-anim 5s infinite linear alternate-reverse;
    }

    // Creates a copy after our text. Note comments from ::before.
    &::after {
        @include glitchCopy;
        left: -2px;
        text-shadow: -2px 0 var(--heading-color), 2px 2px var(--primary-color);
        animation: glitch-anim2 1s infinite linear alternate-reverse;
    }
}

/* Creates an animation with 20 steaps. For each step, it calculates
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
    $steps: 10;
    @for $i from 0 through $steps {
        #{percentage($i*(math.div(1, $steps)))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((math.div(random(100), 100)) + deg);
        }
    }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
    $steps: 10;
    @for $i from 0 through $steps {
        #{percentage($i*(math.div(1, $steps)))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((math.div(random(100), 100)) + deg);
        }
    }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
    $steps: 3;
    @for $i from 0 through $steps {
        #{percentage($i*(math.div(1, $steps)))} {
            transform: skew((random(10) - 5) + deg);
        }
    }
}

/*===== Text Neon Effect =====*/

$NeonP: rgba(255, 102, 0, 0.25);
$NeonS: rgba(255, 102, 0, 0.5);

.neonText {
    animation: flicker 2s infinite alternate;
}

/* Flickering animation */
@keyframes flicker {

    0%, 18%, 22%, 25%, 53%, 57%, 100% {

        text-shadow: 0 0 0 $NeonP,
        0 0 4px $NeonP,
        0 0 11px $NeonP,
        0 0 20px $NeonS,
        0 0 40px $NeonS,
        0 0 600px $NeonS,
        0 0 80px $NeonS,
        0 0 110px $NeonS;

    }

    20%, 24%, 55% {
        text-shadow: none;
    }
}

.neonSt {
    text-shadow: 0 3px rgb(255 102 0 / 75%), 0 0 40px rgb(255 102 0 / 50%), 0 0 100px rgb(255 102 0)
    //0 0 0 $NeonP,
    //0 0 4px $NeonP,
    //0 0 11px $NeonP,
    //0 0 20px $NeonS,
    //0 0 40px $NeonS,
    //0 0 600px $NeonS,
    //0 0 80px $NeonS,
    //0 0 110px $NeonS;
}
